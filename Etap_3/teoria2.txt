Typ obiektowy
•	Typ obiektowy (inaczej klasa) łączy w sobie atrybuty oraz metody. 
•	Typy obiektowe można wykorzystać w blokach PL/SQL a także w definicji kolumn i tabel.
•	Wykorzystanie obiektu wymaga najpierw zadeklarowania jego typu w bazie danych.
•	Obiekty mogą być:
	– trwałe (zapisywane w bazie danych),
	– nietrwałe (przechowywane tylko z zmiennych języka PL/SQL).
•	Typ obiektowy dzieli się na specyfikację oraz ciało
Definicja typu obiektowego ma następującą postać:
CREATE [OR REPLACE] TYPE nazwa_typu
{ { AS | IS } OBJECT | UNDER nazwa_typu_macierzystego }
(
atrybut1 typ1 [, atrybut2 typ2]...
[,[ [NOT] OVERRIDING ] [ [NOT] FINAL ] [ [NOT] INSTANTIABLE ]
{ MEMBER | STATIC } specyfikacja_metody, ..., ]
)
[ [NOT] FINAL ]
[ [NOT] INSTANTIABLE ];

Specyfikacja metody ma postać:
PROCEDURE nazwa_procedury (par1 typ1 [, par2 typ2 ]...)
FUNCTION nazwa_funkcji (par1 typ1 [, par2 typ2 ]...)
RETURN typ_zwracany

Konstruktor
Konstruktor typów obiektowych
• Każdy typ obiektowy ma konstruktor, funkcję o takiej samej nazwie jak obiekt typu.
• Konstruktor inicjalizuje i zwraca nową instancję obiektu danego typu.
• Konstruktory generowane są domyślnie dla każdego typu.
• Zawierają listę parametrów formalnych zgodną z porządkiem, nazwami i typami
atrybutów typu.
• Można definiować własne konstruktory zastępując istniejące albo przeładowując je
podając inną listę parametrów.
• Konstruktory trzeba wywoływać jawnie. 

Tworzenie obiektów:
Typy obiektowe (klasy) są składowane w bazie danych jako obiekty bazy danych podobnie jak perspektywy, wyzwalacze albo pakiety. Typy obiektowe można utworzyć za pomocą polecenia CREATE [OR REPLACE] TYPE nazwa AS OBJECT. 
Przykład: 
create or replace type telefon as object (	
siec character varying (20),	
darmowe_minuty numeric(5,2), 	
numer character varying (30) );
Analizując przykładowe polecenie łatwo zauważyć, że składnia tego polecenia jest podobna do składni polecenia CREATE TABLE. Po rozpoczęciu polecenia słowami kluczowymi CREATE, opcjonalnie OR REPLACE, podaniu nazwy tworzonego typu i słowach kluczowych AS OBJECT podaje się w nawiasach listę atrybutów. Listę atrybutów podaje się w sposób analogiczny do polecenia CREATE TABLE, nie można jednak definiować żadnych ograniczeń integralnościowych. Polecenie CREATE TYPE.. AS OBJECT kończy się średnikiem.

Polimorfizm - przedefiniując dziedziczone metody w podtypie mamy możliwość zdefiniowania innego sposobu wykonania metod na obiektach podtypu. Obiekt podtypu może być użyty w kodzie w miejsce obiektu nadtypu – definiując dla różnych podtypów różne działania.
Polimorfizm powoduje, że obiekty podtypu mogą zachowywać się jak obiekty swojego nadtypu – zamiast obiektu nadtypu można wykorzystać obiekt podtypu – zamiast obiektu podtypu można wymusić wykorzystanie obiektu nadtypu przez użycie operatora TREAT – wybór wersji metody przeciążonej następuje w momencie wykonania programu (metody są wirtualne).
CREATE TABLE pracownicyIdydaktycyObjTab OF PRACOWNIK;
INSERT INTO pracownicyIdydaktycyObjTab VALUES
(NEW Pracownik('Bolek',2000,'ASYSTENT',DATE '1969-09-03'));
INSERT INTO pracownicyIdydaktycyObjTab VALUES
(NEW Dydaktyk('Lolek',5000,'PROF.',DATE '1949-11-13','dr.'));
SELECT p.nazwisko, p.wiek() FROM pracownicyIdydaktycyObjTab p;

Hermetyzacja - W obiektowych bazach danych stała się możliwa hermetyzacja (ang. encapsulate) ponieważ na obiektach możemy operować metodami.

Typy referencyjne
• OID
– identyfikator obiektu wierszowego. Object identity – zakłada się, że obiekty mają własny identyfikator, w związku z czym żadne dwa obiekty nie mogą mieć tego samego OID i żaden obiekt nie może mieć dwóch różnych OID. 

Typy referencyjne (REF, DEREF)

create type Osoba as object( imię varchar(10), nazwisko varchar(20)); create type Obraz as object( utworzony Date, autor REF Osoba); create table Obrazy of Obraz; create table Osoby of Osoba; insert into Osoby values ('Jan','Tarzan'); insert into Obrazy select '1-04-2006', ref(o) from Osoby o where nazwisko = 'Tarzan';

W obiektowo-relacyjnych bazach danych związki między obiektami są modelowane za pomocą nowego systemowego typu danych – typu referencyjnego. Wartościami referencyjnego typu danych są identyfikatory obiektów. Referencyjny typ danych służy do przechowywania identyfikatorów innych obiektów powiązanych z danym obiektem. Mechanizm referencyjnych typów danych w przeciwieństwie do związków w czysto obiektowym modelu danych reprezentuje jedynie związki jednokierunkowe. Modelowanie związków dwukierunkowych wymaga odrębnego użycia dwóch różnych referencji. Powyżej pokazano przykład jednokierunkowego związki jednokrotnego łączącego obiekty typu Obraz z wystąpieniami typu Osoba. Definicja typy Obraz obejmuje atrybut autor zdefiniowany na referencyjnym typie danych. Wartościami tego atrybutu będą identyfikatory obiektów typu Osoba.

DEREF - Aby uzyskać dostęp do obiektu wskazywanego przez referencję należy wykonać
operację dereferencji. Dereferencji można dokonać w sposób jawny, bądź niejawny.

SELECT NAZWISKO,DEREF(KONTAKT).NUMER AS NUMER FROM PRACOWNICY_O P;

SELECT NAZWISKO,P.KONTAKT.NUMER AS NUMER FROM PRACOWNICY_O P;

Pierwsze z powyższych zapytań wykonuje de referencję w sposób jawny, natomiast drugie wykorzystuje dereferencję niejawną. Operator DEREF jest operatorem dereferencji. Jako parametr przyjmuje on referencję na obiekt, a jego wartością jest wskazywany obiekt. Atrybut KONTAKT stanowi referencję na obiekt typu TELEFON, dlatego też, dla każdego pracownika, operator DEREF zwraca wskazywany przez referencję KONTAKT telefon. Mając dany obiekt typu TELEFON można w łatwy sposób, za pomocą operatora kropkowego, odczytać jego numer („.NUMER”). W niektórych sytuacjach operator DEREF można pominąć. Jeżeli nawigujemy za pomocą operatora kropkowego, poprzez referencję, do wartości atrybutów wskazywanego obiektu, to wykonywana jest automatyczna dereferencja i operator DEREF nie jest tutaj potrzebny. Operator DEREF znajduje zastosowanie właściwie jedynie w sytuacjach, kiedy chcemy uzyskać w wyniku zapytania całe obiekty, na które mamy dane referencje. Należy tutaj jeszcze zauważyć, że nazwę atrybutu przechowującego referencje poprzedzono aliasem tabeli obiektowej. 
W sytuacji gdy korzystamy z niejawnej dereferencji, jest to obowiązkowe.




Porównanie możliwości związanych z obiektowością wybranej bazy danych z jej relacyjnymi możliwościami

	
Standard	RDBMS - SQL2 (ANSI X3H2)	ORDBMS - SQL3/4 (w opracowaniu)
współpraca z obiektowymi językami programowania	 RDBMS - słaba, programiści musza dostosowywać program obiektowy do potrzeb bazy	ORDBMS - ograniczona głownie do nowych typów danych
użytkowanie	RDBMS - łatwa do zrozumienia struktura, wiele narzędzi dla użytkowników	 ORDBMS - zapewnia niezależność danych od aplikacji, trudno odzwierciedlać złożone powiązania
programowanie	RDBMS - zapewnia niezależność danych od aplikacji, trudno odzwierciedlać złożone powiązania	ORDBMS - zapewnia niezależność danych od aplikacji, trudno odzwierciedlać złożone powiązania
rozszerzalność	RDBMS - brak	 ORDBMS - głownie ograniczona do nowych typów danych
złożone dane i powiązania miedzy nimi	RDBMS - trudne do zrealizowania	 ORDBMS - trudne do zrealizowania
"dojrzałość" systemów	RDBMS - bardzo dojrzale, dobrze poznana i przetestowana metodologia, liczne implementacje, stabilność na rynku	ORDBMS - niedojrzałe, rozszerzenia są nowe, wciąż ewoluujące i stosunkowo słabo poznane
możliwość utrzymania się na rynku	RDBMS - przewidywana dla dużych przedsiębiorstw obecnych na rynku	ORDBMS - przewidywana dla przedsiębiorstw znanych z RDBMS, dołączają się nowi


RDBMS Relacyjne bazy danych
Zalety:
•	oparte na solidnych podstawach teoretycznych (zainteresowanie świata nauki, a nie tylko biznesu)
•	stabilna pozycja na rynku
•	optymalizacja zapytań
Wady:
•	z góry ustalony konstruktor, brak złożonych obiektów
•	brak środków hermetyzacji i modularyzacji (brak oddzielenia implementacji od specyfikacji)
•	brak środków do przechowywania informacji proceduralnych
•	niezgodność impedancji
•	niezgodność modelu pojęciowego z modelem implementacyjnym




ORDBMS Obiektowo-relacyjne bazy danych
Zalety:
•	przystosowanie do multimediow (duże obiekty BLOB, CLOB i dane binarne)
•	dane przestrzenne (spatial)
•	abstrakcyjne typy danych (ADT)
•	metody (funkcje i procedury) definiowane przez użytkownika w rożnych językach (C++, VisualBasic, Java)
•	kolekcje (zbiory, wielozbiory, sekwencje, tablice zagnieżdżone, tablice o zmiennej długości)
•	typy referencyjne
•	przeciążanie funkcji
•	optymalizacja zapytań
Wady:
•	wciąż nie uniknięto wielu błędów modelu relacyjnego (np. niezgodności impedancji)
•	brak perspektyw na przyszłość
•	produkt hybrydowy "dwa w jednym" (redundancja kodu i danych)
•	brak bazy intelektualnej
•	zmiany wprowadzane ad hoc (kumulowanie błędów koncepcyjnych)





