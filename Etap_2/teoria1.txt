Relacyjno – obiektowe bazy danych to hybrydowe architektury baz danych. Powstają najczęściej poprzez rozszerzenie istniejących relacyjnych systemów bazodanowych o cechy obiektowe. Jest to swojego rodzaju kompromis pomiędzy relacyjnymi, a obiektowymi bazami danych. Obiektowe bazy danych nie mają tak szerokiej infrastruktury jak relacyjne, a budowanie ich od początku wiąże się z dużymi kosztami. Pozwalają na operowanie na danych jak na obiektach, jednakże posiadają relacyjną bazę jako wewnętrzny mechanizm przechowywania danych.

Stanowią bardzo silna grupę systemów, która w ostatnim czasie dobrze zaznaczyła się na rynku oprogramowania. Nazywane są Object Relational lub Extended Relational. Kierunek rozwoju jest wyznaczany przez dwie tendencje:
•	dążenie do zniwelowania niedostatków technologii relacyjnej, szczególnie w zakresie danych multimedialnych, dołączania metod lub reguł "zachowania się" danych, modelowania pojęciowego,
•	chęć wprowadzenia wielu cech obiektowości, takich jak klasy, metody, dziedziczenie, abstrakcyjne typy danych (ADT) - własności potwierdzające choć częściowa obiektowość systemu relacyjnego.

Model danych
ORDBMS korzysta z modelu danych zawartego w standardzie SQL3, który mówi, ze "obiektowo-relacyjny model danych próbuje dodać obiektowości do tablic". Dane są wciąż przechowywane w tabelach, jednak wartości mogą mięć nieco bogatsza niż dotychczas postać - ADT (Abstract Data Type). Pola typu ADT zachowują funkcjonalność zwykłych pól (mogą być używane do indeksowania, wyszukiwania, pobierania lub umieszczania danych) przy nowych zawartościach (jak np. multimedia).

Jezyk zapytań
Ponieważ ten model rozszerza model relacyjny, dlatego opracowywany obecnie SQL3 (nazywany tez ObjectSQL) jest rozszerzeniem SQL. Rozszerzenie dotyczy rozbudowy możliwości zapytań o obiekty zagnieżdżone, ADT, atrybuty o wartości wyliczanej (np. metody obiektu), itp. Wyniki są jednak wciąż podawane w formie tabel krotek, a nie jako kolekcje obiektów.

Model obliczeniowy
Rozszerzony język SQL jest podstawowym interfejsem dostępu do danych. Bezpośrednie odwzorowanie miedzy obiektami z języka programowania a obiektami / tabelami w bazie nie istnieje, tłumaczenie wciąż obciąża programistę.

Obiektowo-relacyjne bazy danych zapewniają:
•	kolekcje (zbiory, wielozbiory, sekwencje, zagnieżdżone tablice, tablice o zmiennej
•	długości, tabele obiektów),
•	metody użytkownika (funkcje i procedury definiowane przez użytkownika w różnych
•	językach C++, VisualBasic, Java, PL/SQL)
•	przeciążanie funkcji,
•	typy referencyjne,
•	perspektywy obiektowe,
•	hierarchie zbiorów danych,
•	przystosowanie do multimediów (duże obiekty BLOB, CLOB i pliki binarne),
•	dane przestrzenne (spatial),
•	abstrakcyjne typy danych (ADT)
•	język zapytań SQL3 zwany też ObjectSQL.

UDT  User-Defined Types – typy definiowane przez użytkownika oraz UDF  User-Defined Functions – funkcje definiowane przez użytkownika, takie typy wraz z potrzebnymi do manipulowania nimi funkcjami i operatorami mogą być definiowane dla potrzeb jednej bazy danych lub aplikacji, z poziomu języka SQL, za pomocą instrukcji create type, create function, create operator itp.
Przykład:
create type mojtyp(internallenght = 8);


Usuwanie
Raz utworzony typ obiektowy można usunąć za pomocą polecenia DROP TYPE
nazwa_typu [FORCE]. Słowo kluczowe FORCE oznacza, że typ obiektowy ma zostać
usunięty niezależnie od jakichkolwiek przeciwwskazań. Oprócz instrukcji usuwania typu obiektowego, która usuwa zarówno implementację jak i specyfikację typu obiektowego, jest też instrukcja usuwania samej implementacji typu obiektowego z pozostawieniem jego specyfikacji.
DROP TYPE BODY typ_obiektowy;
DROP TYPE typ_obiektowy;

Metody operujące na danych
Metody to funkcje lub procedury, które tworzymy w definicji typu obiektowego w celu zaimplementowania zachowania się obiektów danego typu. Aplikacja wywołuje metody aby uzyskać w efekcie to zachowanie. Są trzy typy metod: metody składowe obiektów (metody typu MEMBER), metody konstruktorów obiektów (metody typu CONSTRUCTOR) oraz metody statyczne, czyli odnoszące się do całego typu (metody typu STATIC). W tym wykładzie rozważamy tylko metody składowe obiektów oraz metody konstruktora obiektów implementowane przez system – oprócz tego są jeszcze metody konstruktorów definiowane przez użytkowników.

Składnia ciała typu obiektowego ma postać:
 CREATE [OR REPLACE] TYPE BODY nazwa_typu { IS | AS }
	{ MEMBER | STATIC } implementacja_metody
		[; { MEMBER | STATIC } implementacja_metody ]...
END;

Składnia implementacji metody jest następująca:

PROCEDURE nazwa_procedury (par1 typ1[, par2 typ2 ]...)
	{ IS | AS } pl/sql_block
	
FUNCTION nazwa_funkcji (par1 typ1[, par2 typ2 ]...)
	RETURN typ_zwracany { IS | AS } pl/sql_block

Przykład:
CREATE OR REPLACE TYPE t_ulamek AS OBJECT (
	licznik NUMBER(4),
	mianownik NUMBER(4),
	MEMBER PROCEDURE skroc
);
/

CREATE OR REPLACE TYPE BODY t_ulamek
	AS MEMBER PROCEDURE skroc IS
		dz NUMBER;
	BEGIN
		dz := GCD(licznik, mianownik);
		licznik := licznik/dz;
		mianownik := mianownik/dz;
	END skroc;
END;
/
DECLARE
	u t_ulamek;
BEGIN
	u := t_ulamek(32,144);
	DBMS_OUTPUT.put_line(u.licznik||'/'||u.mianownik); --32/144
	u.skroc;
	DBMS_OUTPUT.put_line(u.licznik||'/'||u.mianownik); --2/9
END;
/
Dziedziczenie

Między typami obiektowymi obowiązuje dziedziczenie tak jak w językach programowania - realizowane przez operator UNDER. Na przykład:

CREATE TYPE Person
AS OBJECT (
  First VARCHAR2(50),
  Last VARCHAR2(50)) NOT FINAL;
/
CREATE TYPE Emp
UNDER Person (
  Salary NUMBER) FINAL;
/


Zdefiniowane przez użytkownika typy danych mogą być specjalizowane za pomocą mechanizmu dziedziczenia. W typach pochodnych w sposób przyrostowy definiuje się różnice między typem pochodnym i bazowym. W typie pochodnym do cech odziedziczonych z typu bazowego można dodać nowe atrybuty, nowe operacje, redefiniować kod odziedziczonych operacji lub zaimplementować kod odziedziczonej operacji abstrakcyjnej. Operacje abstrakcyjne mają zdefiniowaną składnię, ale nie posiadają implementacji. Ich zastosowaniem są typy danych, które służą jedynie jako typy bazowe dla innych docelowych typów danych. Powyżej przedstawiono definicje dwóch typów: typu bazowego „Person” i dziedziczącego po nim typu pochodnego „Emp”. Obiekt typu Emp ma wszystkie cechy obiektu typu Person a poza tym jeszcze cechy wprowadzone w specyfikacji typu Emp.



Abstrakcja (abstrakcyjność)
Klasa abstrakcyjna to taka klasa, dla której nie możemy utworzyć obiektu. Jest bardzo podobna do interfejsu z tą różnicą, że klasy mogą dziedziczyć po wielu interfejsach a tylko po jednej klasie. Klasa abstrakcyjna w odróżnieniu od interfejsu może zawierać ciało metody. Wyjątkiem są metody abstrakcyjne, które nie mogą zawierać swojego ciała. Abstrakcja w obiektowo-relacyjnych bazach danych Oracle jest realizowana w dwóch postaciach:
•	abstrakcji proceduralnej polegającej na ukryciu szczegółów złożonych algorytmów poprzez opakowanie ich w procedury i funkcje; gdy w razie potrzeby zmieniamy procedurę - nie musimy modyfikować aplikacji jej używających;
•	abstrakcji danych polegającej na ukryciu złożoności struktury danych przed użytkownikiem, który korzysta z tych danych; podobnie jak poprzednio, gdy w razie potrzeby zmieniamy strukturę danych – nie musimy modyfikować aplikacji jej używających.
Zalety użycia abstrakcji w bazach danych:
•	Modelowanie danych zachodzi na wyższym poziomie abstrakcji przez co na ogół jest ułatwione.
•	Zmniejszenie złożoności tworzenia aplikacji przez podział zadania na części. Modularność aplikacji. Ułatwienie dokonywania zmian. Ukrycie szczegółów implementacyjnych przed użytkownikiem.
•	Możliwość wielokrotnego użycia komponentów w tej samej lub w różnych aplikacjach.
•	Zgrupowanie używanego kodu po stronie serwera wokół obiektów, na których działa kod. Uzyskanie większej kontroli nad kodem.
•	Zastosowanie obiektowo-relacyjnego modelu danych prowadzi do zmniejszenia rozbieżności w modelach danych samej bazy danych i aplikacji bazodanowej napisanej w obiektowym języku programowania. Oba modele można oprzeć o te same pojęcia: klasy (typu obiektowego) i instancji klasy (obiektu). Jednak chociaż obiekt w bazie danych może mieć tę samą strukturę co obiekt w programie, to jednak przejście między nimi trzeba dokonywać za pomocą kodu (po stronie serwera bazy danych).
